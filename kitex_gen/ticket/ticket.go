// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package ticket

import (
	"context"
	"fmt"
	"github.com/gogogo1024/assist-fusion/kitex_gen/common"
)

type TicketService interface {
	CreateTicket(ctx context.Context, title string, desc string, note string) (r *common.Ticket, err error)

	GetTicket(ctx context.Context, id string) (r *common.Ticket, err error)

	ListTickets(ctx context.Context) (r []*common.Ticket, err error)

	Assign(ctx context.Context, id string, note string) (r *common.Ticket, err error)

	Resolve(ctx context.Context, id string, note string) (r *common.Ticket, err error)

	Escalate(ctx context.Context, id string, note string) (r *common.Ticket, err error)

	Reopen(ctx context.Context, id string, note string) (r *common.Ticket, err error)

	GetCycles(ctx context.Context, id string) (r []*common.TicketCycle, err error)

	GetEvents(ctx context.Context, id string) (r []*common.TicketEvent, err error)
}

type TicketServiceCreateTicketArgs struct {
	Title string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Desc  string `thrift:"desc,2" frugal:"2,default,string" json:"desc"`
	Note  string `thrift:"note,3" frugal:"3,default,string" json:"note"`
}

func NewTicketServiceCreateTicketArgs() *TicketServiceCreateTicketArgs {
	return &TicketServiceCreateTicketArgs{}
}

func (p *TicketServiceCreateTicketArgs) InitDefault() {
}

func (p *TicketServiceCreateTicketArgs) GetTitle() (v string) {
	return p.Title
}

func (p *TicketServiceCreateTicketArgs) GetDesc() (v string) {
	return p.Desc
}

func (p *TicketServiceCreateTicketArgs) GetNote() (v string) {
	return p.Note
}
func (p *TicketServiceCreateTicketArgs) SetTitle(val string) {
	p.Title = val
}
func (p *TicketServiceCreateTicketArgs) SetDesc(val string) {
	p.Desc = val
}
func (p *TicketServiceCreateTicketArgs) SetNote(val string) {
	p.Note = val
}

func (p *TicketServiceCreateTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceCreateTicketArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceCreateTicketArgs = map[int16]string{
	1: "title",
	2: "desc",
	3: "note",
}

type TicketServiceCreateTicketResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceCreateTicketResult() *TicketServiceCreateTicketResult {
	return &TicketServiceCreateTicketResult{}
}

func (p *TicketServiceCreateTicketResult) InitDefault() {
}

var TicketServiceCreateTicketResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceCreateTicketResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceCreateTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceCreateTicketResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceCreateTicketResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceCreateTicketResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceCreateTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceCreateTicketResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceCreateTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceCreateTicketResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceCreateTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceCreateTicketResult(%+v)", *p)
}

var fieldIDToName_TicketServiceCreateTicketResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceGetTicketArgs struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewTicketServiceGetTicketArgs() *TicketServiceGetTicketArgs {
	return &TicketServiceGetTicketArgs{}
}

func (p *TicketServiceGetTicketArgs) InitDefault() {
}

func (p *TicketServiceGetTicketArgs) GetId() (v string) {
	return p.Id
}
func (p *TicketServiceGetTicketArgs) SetId(val string) {
	p.Id = val
}

func (p *TicketServiceGetTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetTicketArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceGetTicketArgs = map[int16]string{
	1: "id",
}

type TicketServiceGetTicketResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceGetTicketResult() *TicketServiceGetTicketResult {
	return &TicketServiceGetTicketResult{}
}

func (p *TicketServiceGetTicketResult) InitDefault() {
}

var TicketServiceGetTicketResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceGetTicketResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceGetTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceGetTicketResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceGetTicketResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceGetTicketResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceGetTicketResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceGetTicketResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceGetTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceGetTicketResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceGetTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetTicketResult(%+v)", *p)
}

var fieldIDToName_TicketServiceGetTicketResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceListTicketsArgs struct {
}

func NewTicketServiceListTicketsArgs() *TicketServiceListTicketsArgs {
	return &TicketServiceListTicketsArgs{}
}

func (p *TicketServiceListTicketsArgs) InitDefault() {
}

func (p *TicketServiceListTicketsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceListTicketsArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceListTicketsArgs = map[int16]string{}

type TicketServiceListTicketsResult struct {
	Success []*common.Ticket     `thrift:"success,0,optional" frugal:"0,optional,list<common.Ticket>" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceListTicketsResult() *TicketServiceListTicketsResult {
	return &TicketServiceListTicketsResult{}
}

func (p *TicketServiceListTicketsResult) InitDefault() {
}

var TicketServiceListTicketsResult_Success_DEFAULT []*common.Ticket

func (p *TicketServiceListTicketsResult) GetSuccess() (v []*common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceListTicketsResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceListTicketsResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceListTicketsResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceListTicketsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceListTicketsResult) SetSuccess(x interface{}) {
	p.Success = x.([]*common.Ticket)
}
func (p *TicketServiceListTicketsResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceListTicketsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceListTicketsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceListTicketsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceListTicketsResult(%+v)", *p)
}

var fieldIDToName_TicketServiceListTicketsResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceAssignArgs struct {
	Id   string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Note string `thrift:"note,2" frugal:"2,default,string" json:"note"`
}

func NewTicketServiceAssignArgs() *TicketServiceAssignArgs {
	return &TicketServiceAssignArgs{}
}

func (p *TicketServiceAssignArgs) InitDefault() {
}

func (p *TicketServiceAssignArgs) GetId() (v string) {
	return p.Id
}

func (p *TicketServiceAssignArgs) GetNote() (v string) {
	return p.Note
}
func (p *TicketServiceAssignArgs) SetId(val string) {
	p.Id = val
}
func (p *TicketServiceAssignArgs) SetNote(val string) {
	p.Note = val
}

func (p *TicketServiceAssignArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceAssignArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceAssignArgs = map[int16]string{
	1: "id",
	2: "note",
}

type TicketServiceAssignResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceAssignResult() *TicketServiceAssignResult {
	return &TicketServiceAssignResult{}
}

func (p *TicketServiceAssignResult) InitDefault() {
}

var TicketServiceAssignResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceAssignResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceAssignResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceAssignResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceAssignResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceAssignResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceAssignResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceAssignResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceAssignResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceAssignResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceAssignResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceAssignResult(%+v)", *p)
}

var fieldIDToName_TicketServiceAssignResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceResolveArgs struct {
	Id   string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Note string `thrift:"note,2" frugal:"2,default,string" json:"note"`
}

func NewTicketServiceResolveArgs() *TicketServiceResolveArgs {
	return &TicketServiceResolveArgs{}
}

func (p *TicketServiceResolveArgs) InitDefault() {
}

func (p *TicketServiceResolveArgs) GetId() (v string) {
	return p.Id
}

func (p *TicketServiceResolveArgs) GetNote() (v string) {
	return p.Note
}
func (p *TicketServiceResolveArgs) SetId(val string) {
	p.Id = val
}
func (p *TicketServiceResolveArgs) SetNote(val string) {
	p.Note = val
}

func (p *TicketServiceResolveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceResolveArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceResolveArgs = map[int16]string{
	1: "id",
	2: "note",
}

type TicketServiceResolveResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceResolveResult() *TicketServiceResolveResult {
	return &TicketServiceResolveResult{}
}

func (p *TicketServiceResolveResult) InitDefault() {
}

var TicketServiceResolveResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceResolveResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceResolveResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceResolveResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceResolveResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceResolveResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceResolveResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceResolveResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceResolveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceResolveResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceResolveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceResolveResult(%+v)", *p)
}

var fieldIDToName_TicketServiceResolveResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceEscalateArgs struct {
	Id   string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Note string `thrift:"note,2" frugal:"2,default,string" json:"note"`
}

func NewTicketServiceEscalateArgs() *TicketServiceEscalateArgs {
	return &TicketServiceEscalateArgs{}
}

func (p *TicketServiceEscalateArgs) InitDefault() {
}

func (p *TicketServiceEscalateArgs) GetId() (v string) {
	return p.Id
}

func (p *TicketServiceEscalateArgs) GetNote() (v string) {
	return p.Note
}
func (p *TicketServiceEscalateArgs) SetId(val string) {
	p.Id = val
}
func (p *TicketServiceEscalateArgs) SetNote(val string) {
	p.Note = val
}

func (p *TicketServiceEscalateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceEscalateArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceEscalateArgs = map[int16]string{
	1: "id",
	2: "note",
}

type TicketServiceEscalateResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceEscalateResult() *TicketServiceEscalateResult {
	return &TicketServiceEscalateResult{}
}

func (p *TicketServiceEscalateResult) InitDefault() {
}

var TicketServiceEscalateResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceEscalateResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceEscalateResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceEscalateResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceEscalateResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceEscalateResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceEscalateResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceEscalateResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceEscalateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceEscalateResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceEscalateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceEscalateResult(%+v)", *p)
}

var fieldIDToName_TicketServiceEscalateResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceReopenArgs struct {
	Id   string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Note string `thrift:"note,2" frugal:"2,default,string" json:"note"`
}

func NewTicketServiceReopenArgs() *TicketServiceReopenArgs {
	return &TicketServiceReopenArgs{}
}

func (p *TicketServiceReopenArgs) InitDefault() {
}

func (p *TicketServiceReopenArgs) GetId() (v string) {
	return p.Id
}

func (p *TicketServiceReopenArgs) GetNote() (v string) {
	return p.Note
}
func (p *TicketServiceReopenArgs) SetId(val string) {
	p.Id = val
}
func (p *TicketServiceReopenArgs) SetNote(val string) {
	p.Note = val
}

func (p *TicketServiceReopenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceReopenArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceReopenArgs = map[int16]string{
	1: "id",
	2: "note",
}

type TicketServiceReopenResult struct {
	Success *common.Ticket       `thrift:"success,0,optional" frugal:"0,optional,common.Ticket" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceReopenResult() *TicketServiceReopenResult {
	return &TicketServiceReopenResult{}
}

func (p *TicketServiceReopenResult) InitDefault() {
}

var TicketServiceReopenResult_Success_DEFAULT *common.Ticket

func (p *TicketServiceReopenResult) GetSuccess() (v *common.Ticket) {
	if !p.IsSetSuccess() {
		return TicketServiceReopenResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceReopenResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceReopenResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceReopenResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceReopenResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.Ticket)
}
func (p *TicketServiceReopenResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceReopenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceReopenResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceReopenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceReopenResult(%+v)", *p)
}

var fieldIDToName_TicketServiceReopenResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceGetCyclesArgs struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewTicketServiceGetCyclesArgs() *TicketServiceGetCyclesArgs {
	return &TicketServiceGetCyclesArgs{}
}

func (p *TicketServiceGetCyclesArgs) InitDefault() {
}

func (p *TicketServiceGetCyclesArgs) GetId() (v string) {
	return p.Id
}
func (p *TicketServiceGetCyclesArgs) SetId(val string) {
	p.Id = val
}

func (p *TicketServiceGetCyclesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetCyclesArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceGetCyclesArgs = map[int16]string{
	1: "id",
}

type TicketServiceGetCyclesResult struct {
	Success []*common.TicketCycle `thrift:"success,0,optional" frugal:"0,optional,list<common.TicketCycle>" json:"success,omitempty"`
	Err     *common.ServiceError  `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceGetCyclesResult() *TicketServiceGetCyclesResult {
	return &TicketServiceGetCyclesResult{}
}

func (p *TicketServiceGetCyclesResult) InitDefault() {
}

var TicketServiceGetCyclesResult_Success_DEFAULT []*common.TicketCycle

func (p *TicketServiceGetCyclesResult) GetSuccess() (v []*common.TicketCycle) {
	if !p.IsSetSuccess() {
		return TicketServiceGetCyclesResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceGetCyclesResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceGetCyclesResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceGetCyclesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceGetCyclesResult) SetSuccess(x interface{}) {
	p.Success = x.([]*common.TicketCycle)
}
func (p *TicketServiceGetCyclesResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceGetCyclesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceGetCyclesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceGetCyclesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetCyclesResult(%+v)", *p)
}

var fieldIDToName_TicketServiceGetCyclesResult = map[int16]string{
	0: "success",
	1: "err",
}

type TicketServiceGetEventsArgs struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewTicketServiceGetEventsArgs() *TicketServiceGetEventsArgs {
	return &TicketServiceGetEventsArgs{}
}

func (p *TicketServiceGetEventsArgs) InitDefault() {
}

func (p *TicketServiceGetEventsArgs) GetId() (v string) {
	return p.Id
}
func (p *TicketServiceGetEventsArgs) SetId(val string) {
	p.Id = val
}

func (p *TicketServiceGetEventsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetEventsArgs(%+v)", *p)
}

var fieldIDToName_TicketServiceGetEventsArgs = map[int16]string{
	1: "id",
}

type TicketServiceGetEventsResult struct {
	Success []*common.TicketEvent `thrift:"success,0,optional" frugal:"0,optional,list<common.TicketEvent>" json:"success,omitempty"`
	Err     *common.ServiceError  `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewTicketServiceGetEventsResult() *TicketServiceGetEventsResult {
	return &TicketServiceGetEventsResult{}
}

func (p *TicketServiceGetEventsResult) InitDefault() {
}

var TicketServiceGetEventsResult_Success_DEFAULT []*common.TicketEvent

func (p *TicketServiceGetEventsResult) GetSuccess() (v []*common.TicketEvent) {
	if !p.IsSetSuccess() {
		return TicketServiceGetEventsResult_Success_DEFAULT
	}
	return p.Success
}

var TicketServiceGetEventsResult_Err_DEFAULT *common.ServiceError

func (p *TicketServiceGetEventsResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return TicketServiceGetEventsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *TicketServiceGetEventsResult) SetSuccess(x interface{}) {
	p.Success = x.([]*common.TicketEvent)
}
func (p *TicketServiceGetEventsResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *TicketServiceGetEventsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TicketServiceGetEventsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *TicketServiceGetEventsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketServiceGetEventsResult(%+v)", *p)
}

var fieldIDToName_TicketServiceGetEventsResult = map[int16]string{
	0: "success",
	1: "err",
}

// exceptions of methods in TicketService.
var (
	_ error = (*common.ServiceError)(nil)
)
