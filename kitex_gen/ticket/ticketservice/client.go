// Code generated by Kitex v0.14.1. DO NOT EDIT.

package ticketservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	common "github.com/gogogo1024/assist-fusion/kitex_gen/common"
	ticket "github.com/gogogo1024/assist-fusion/kitex_gen/ticket"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateTicket(ctx context.Context, req *ticket.CreateTicketRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	GetTicket(ctx context.Context, req *ticket.GetTicketRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	ListTickets(ctx context.Context, req *ticket.ListTicketsRequest, callOptions ...callopt.Option) (r *ticket.ListTicketsResponse, err error)
	Assign(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	Resolve(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	Escalate(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	Reopen(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error)
	GetCycles(ctx context.Context, req *ticket.GetCyclesRequest, callOptions ...callopt.Option) (r []*common.TicketCycle, err error)
	GetEvents(ctx context.Context, req *ticket.GetEventsRequest, callOptions ...callopt.Option) (r []*common.TicketEvent, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kTicketServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTicketServiceClient struct {
	*kClient
}

func (p *kTicketServiceClient) CreateTicket(ctx context.Context, req *ticket.CreateTicketRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTicket(ctx, req)
}

func (p *kTicketServiceClient) GetTicket(ctx context.Context, req *ticket.GetTicketRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTicket(ctx, req)
}

func (p *kTicketServiceClient) ListTickets(ctx context.Context, req *ticket.ListTicketsRequest, callOptions ...callopt.Option) (r *ticket.ListTicketsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListTickets(ctx, req)
}

func (p *kTicketServiceClient) Assign(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Assign(ctx, req)
}

func (p *kTicketServiceClient) Resolve(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Resolve(ctx, req)
}

func (p *kTicketServiceClient) Escalate(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Escalate(ctx, req)
}

func (p *kTicketServiceClient) Reopen(ctx context.Context, req *ticket.TicketActionRequest, callOptions ...callopt.Option) (r *ticket.TicketResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Reopen(ctx, req)
}

func (p *kTicketServiceClient) GetCycles(ctx context.Context, req *ticket.GetCyclesRequest, callOptions ...callopt.Option) (r []*common.TicketCycle, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCycles(ctx, req)
}

func (p *kTicketServiceClient) GetEvents(ctx context.Context, req *ticket.GetEventsRequest, callOptions ...callopt.Option) (r []*common.TicketEvent, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetEvents(ctx, req)
}
