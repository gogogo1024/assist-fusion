// Code generated by Kitex v0.14.1. DO NOT EDIT.

package ticketservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	common "github.com/gogogo1024/assist-fusion/kitex_gen/common"
	ticket "github.com/gogogo1024/assist-fusion/kitex_gen/ticket"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTicket": kitex.NewMethodInfo(
		createTicketHandler,
		newTicketServiceCreateTicketArgs,
		newTicketServiceCreateTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTicket": kitex.NewMethodInfo(
		getTicketHandler,
		newTicketServiceGetTicketArgs,
		newTicketServiceGetTicketResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListTickets": kitex.NewMethodInfo(
		listTicketsHandler,
		newTicketServiceListTicketsArgs,
		newTicketServiceListTicketsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Assign": kitex.NewMethodInfo(
		assignHandler,
		newTicketServiceAssignArgs,
		newTicketServiceAssignResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Resolve": kitex.NewMethodInfo(
		resolveHandler,
		newTicketServiceResolveArgs,
		newTicketServiceResolveResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Escalate": kitex.NewMethodInfo(
		escalateHandler,
		newTicketServiceEscalateArgs,
		newTicketServiceEscalateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Reopen": kitex.NewMethodInfo(
		reopenHandler,
		newTicketServiceReopenArgs,
		newTicketServiceReopenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCycles": kitex.NewMethodInfo(
		getCyclesHandler,
		newTicketServiceGetCyclesArgs,
		newTicketServiceGetCyclesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvents": kitex.NewMethodInfo(
		getEventsHandler,
		newTicketServiceGetEventsArgs,
		newTicketServiceGetEventsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	ticketServiceServiceInfo                = NewServiceInfo()
	ticketServiceServiceInfoForClient       = NewServiceInfoForClient()
	ticketServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return ticketServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return ticketServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return ticketServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TicketService"
	handlerType := (*ticket.TicketService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "ticket",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func createTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceCreateTicketArgs)
	realResult := result.(*ticket.TicketServiceCreateTicketResult)
	success, err := handler.(ticket.TicketService).CreateTicket(ctx, realArg.Title, realArg.Desc, realArg.Note)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceCreateTicketArgs() interface{} {
	return ticket.NewTicketServiceCreateTicketArgs()
}

func newTicketServiceCreateTicketResult() interface{} {
	return ticket.NewTicketServiceCreateTicketResult()
}

func getTicketHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceGetTicketArgs)
	realResult := result.(*ticket.TicketServiceGetTicketResult)
	success, err := handler.(ticket.TicketService).GetTicket(ctx, realArg.Id)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceGetTicketArgs() interface{} {
	return ticket.NewTicketServiceGetTicketArgs()
}

func newTicketServiceGetTicketResult() interface{} {
	return ticket.NewTicketServiceGetTicketResult()
}

func listTicketsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*ticket.TicketServiceListTicketsArgs)
	realResult := result.(*ticket.TicketServiceListTicketsResult)
	success, err := handler.(ticket.TicketService).ListTickets(ctx)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceListTicketsArgs() interface{} {
	return ticket.NewTicketServiceListTicketsArgs()
}

func newTicketServiceListTicketsResult() interface{} {
	return ticket.NewTicketServiceListTicketsResult()
}

func assignHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceAssignArgs)
	realResult := result.(*ticket.TicketServiceAssignResult)
	success, err := handler.(ticket.TicketService).Assign(ctx, realArg.Id, realArg.Note)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceAssignArgs() interface{} {
	return ticket.NewTicketServiceAssignArgs()
}

func newTicketServiceAssignResult() interface{} {
	return ticket.NewTicketServiceAssignResult()
}

func resolveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceResolveArgs)
	realResult := result.(*ticket.TicketServiceResolveResult)
	success, err := handler.(ticket.TicketService).Resolve(ctx, realArg.Id, realArg.Note)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceResolveArgs() interface{} {
	return ticket.NewTicketServiceResolveArgs()
}

func newTicketServiceResolveResult() interface{} {
	return ticket.NewTicketServiceResolveResult()
}

func escalateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceEscalateArgs)
	realResult := result.(*ticket.TicketServiceEscalateResult)
	success, err := handler.(ticket.TicketService).Escalate(ctx, realArg.Id, realArg.Note)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceEscalateArgs() interface{} {
	return ticket.NewTicketServiceEscalateArgs()
}

func newTicketServiceEscalateResult() interface{} {
	return ticket.NewTicketServiceEscalateResult()
}

func reopenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceReopenArgs)
	realResult := result.(*ticket.TicketServiceReopenResult)
	success, err := handler.(ticket.TicketService).Reopen(ctx, realArg.Id, realArg.Note)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceReopenArgs() interface{} {
	return ticket.NewTicketServiceReopenArgs()
}

func newTicketServiceReopenResult() interface{} {
	return ticket.NewTicketServiceReopenResult()
}

func getCyclesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceGetCyclesArgs)
	realResult := result.(*ticket.TicketServiceGetCyclesResult)
	success, err := handler.(ticket.TicketService).GetCycles(ctx, realArg.Id)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceGetCyclesArgs() interface{} {
	return ticket.NewTicketServiceGetCyclesArgs()
}

func newTicketServiceGetCyclesResult() interface{} {
	return ticket.NewTicketServiceGetCyclesResult()
}

func getEventsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ticket.TicketServiceGetEventsArgs)
	realResult := result.(*ticket.TicketServiceGetEventsResult)
	success, err := handler.(ticket.TicketService).GetEvents(ctx, realArg.Id)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newTicketServiceGetEventsArgs() interface{} {
	return ticket.NewTicketServiceGetEventsArgs()
}

func newTicketServiceGetEventsResult() interface{} {
	return ticket.NewTicketServiceGetEventsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTicket(ctx context.Context, title string, desc string, note string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceCreateTicketArgs
	_args.Title = title
	_args.Desc = desc
	_args.Note = note
	var _result ticket.TicketServiceCreateTicketResult
	if err = p.c.Call(ctx, "CreateTicket", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTicket(ctx context.Context, id string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceGetTicketArgs
	_args.Id = id
	var _result ticket.TicketServiceGetTicketResult
	if err = p.c.Call(ctx, "GetTicket", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTickets(ctx context.Context) (r []*common.Ticket, err error) {
	var _args ticket.TicketServiceListTicketsArgs
	var _result ticket.TicketServiceListTicketsResult
	if err = p.c.Call(ctx, "ListTickets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Assign(ctx context.Context, id string, note string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceAssignArgs
	_args.Id = id
	_args.Note = note
	var _result ticket.TicketServiceAssignResult
	if err = p.c.Call(ctx, "Assign", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Resolve(ctx context.Context, id string, note string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceResolveArgs
	_args.Id = id
	_args.Note = note
	var _result ticket.TicketServiceResolveResult
	if err = p.c.Call(ctx, "Resolve", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Escalate(ctx context.Context, id string, note string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceEscalateArgs
	_args.Id = id
	_args.Note = note
	var _result ticket.TicketServiceEscalateResult
	if err = p.c.Call(ctx, "Escalate", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Reopen(ctx context.Context, id string, note string) (r *common.Ticket, err error) {
	var _args ticket.TicketServiceReopenArgs
	_args.Id = id
	_args.Note = note
	var _result ticket.TicketServiceReopenResult
	if err = p.c.Call(ctx, "Reopen", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCycles(ctx context.Context, id string) (r []*common.TicketCycle, err error) {
	var _args ticket.TicketServiceGetCyclesArgs
	_args.Id = id
	var _result ticket.TicketServiceGetCyclesResult
	if err = p.c.Call(ctx, "GetCycles", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvents(ctx context.Context, id string) (r []*common.TicketEvent, err error) {
	var _args ticket.TicketServiceGetEventsArgs
	_args.Id = id
	var _result ticket.TicketServiceGetEventsResult
	if err = p.c.Call(ctx, "GetEvents", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}
