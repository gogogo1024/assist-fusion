// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package kb

import (
	"context"
	"fmt"

	"github.com/gogogo1024/assist-fusion/kitex_gen/common"
)

type AddDocRequest struct {
	Title   string            `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Content string            `thrift:"content,2" frugal:"2,default,string" json:"content"`
	Tags    map[string]string `thrift:"tags,3,optional" frugal:"3,optional,map<string:string>" json:"tags,omitempty"`
}

func NewAddDocRequest() *AddDocRequest {
	return &AddDocRequest{}
}

func (p *AddDocRequest) InitDefault() {
}

func (p *AddDocRequest) GetTitle() (v string) {
	return p.Title
}

func (p *AddDocRequest) GetContent() (v string) {
	return p.Content
}

var AddDocRequest_Tags_DEFAULT map[string]string

func (p *AddDocRequest) GetTags() (v map[string]string) {
	if !p.IsSetTags() {
		return AddDocRequest_Tags_DEFAULT
	}
	return p.Tags
}
func (p *AddDocRequest) SetTitle(val string) {
	p.Title = val
}
func (p *AddDocRequest) SetContent(val string) {
	p.Content = val
}
func (p *AddDocRequest) SetTags(val map[string]string) {
	p.Tags = val
}

func (p *AddDocRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *AddDocRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddDocRequest(%+v)", *p)
}

var fieldIDToName_AddDocRequest = map[int16]string{
	1: "title",
	2: "content",
	3: "tags",
}

type UpdateDocRequest struct {
	Id      string            `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Title   *string           `thrift:"title,2,optional" frugal:"2,optional,string" json:"title,omitempty"`
	Content *string           `thrift:"content,3,optional" frugal:"3,optional,string" json:"content,omitempty"`
	Tags    map[string]string `thrift:"tags,4,optional" frugal:"4,optional,map<string:string>" json:"tags,omitempty"`
}

func NewUpdateDocRequest() *UpdateDocRequest {
	return &UpdateDocRequest{}
}

func (p *UpdateDocRequest) InitDefault() {
}

func (p *UpdateDocRequest) GetId() (v string) {
	return p.Id
}

var UpdateDocRequest_Title_DEFAULT string

func (p *UpdateDocRequest) GetTitle() (v string) {
	if !p.IsSetTitle() {
		return UpdateDocRequest_Title_DEFAULT
	}
	return *p.Title
}

var UpdateDocRequest_Content_DEFAULT string

func (p *UpdateDocRequest) GetContent() (v string) {
	if !p.IsSetContent() {
		return UpdateDocRequest_Content_DEFAULT
	}
	return *p.Content
}

var UpdateDocRequest_Tags_DEFAULT map[string]string

func (p *UpdateDocRequest) GetTags() (v map[string]string) {
	if !p.IsSetTags() {
		return UpdateDocRequest_Tags_DEFAULT
	}
	return p.Tags
}
func (p *UpdateDocRequest) SetId(val string) {
	p.Id = val
}
func (p *UpdateDocRequest) SetTitle(val *string) {
	p.Title = val
}
func (p *UpdateDocRequest) SetContent(val *string) {
	p.Content = val
}
func (p *UpdateDocRequest) SetTags(val map[string]string) {
	p.Tags = val
}

func (p *UpdateDocRequest) IsSetTitle() bool {
	return p.Title != nil
}

func (p *UpdateDocRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *UpdateDocRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *UpdateDocRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDocRequest(%+v)", *p)
}

var fieldIDToName_UpdateDocRequest = map[int16]string{
	1: "id",
	2: "title",
	3: "content",
	4: "tags",
}

type DeleteDocRequest struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewDeleteDocRequest() *DeleteDocRequest {
	return &DeleteDocRequest{}
}

func (p *DeleteDocRequest) InitDefault() {
}

func (p *DeleteDocRequest) GetId() (v string) {
	return p.Id
}
func (p *DeleteDocRequest) SetId(val string) {
	p.Id = val
}

func (p *DeleteDocRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDocRequest(%+v)", *p)
}

var fieldIDToName_DeleteDocRequest = map[int16]string{
	1: "id",
}

type DeleteDocResponse struct {
	Ok bool `thrift:"ok,1" frugal:"1,default,bool" json:"ok"`
}

func NewDeleteDocResponse() *DeleteDocResponse {
	return &DeleteDocResponse{}
}

func (p *DeleteDocResponse) InitDefault() {
}

func (p *DeleteDocResponse) GetOk() (v bool) {
	return p.Ok
}
func (p *DeleteDocResponse) SetOk(val bool) {
	p.Ok = val
}

func (p *DeleteDocResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDocResponse(%+v)", *p)
}

var fieldIDToName_DeleteDocResponse = map[int16]string{
	1: "ok",
}

type SearchRequest struct {
	Query       string `thrift:"query,1" frugal:"1,default,string" json:"query"`
	Limit       *int32 `thrift:"limit,2,optional" frugal:"2,optional,i32" json:"limit,omitempty"`
	Offset      *int32 `thrift:"offset,3,optional" frugal:"3,optional,i32" json:"offset,omitempty"`
	WithSnippet *bool  `thrift:"with_snippet,4,optional" frugal:"4,optional,bool" json:"with_snippet,omitempty"`
}

func NewSearchRequest() *SearchRequest {
	return &SearchRequest{}
}

func (p *SearchRequest) InitDefault() {
}

func (p *SearchRequest) GetQuery() (v string) {
	return p.Query
}

var SearchRequest_Limit_DEFAULT int32

func (p *SearchRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return SearchRequest_Limit_DEFAULT
	}
	return *p.Limit
}

var SearchRequest_Offset_DEFAULT int32

func (p *SearchRequest) GetOffset() (v int32) {
	if !p.IsSetOffset() {
		return SearchRequest_Offset_DEFAULT
	}
	return *p.Offset
}

var SearchRequest_WithSnippet_DEFAULT bool

func (p *SearchRequest) GetWithSnippet() (v bool) {
	if !p.IsSetWithSnippet() {
		return SearchRequest_WithSnippet_DEFAULT
	}
	return *p.WithSnippet
}
func (p *SearchRequest) SetQuery(val string) {
	p.Query = val
}
func (p *SearchRequest) SetLimit(val *int32) {
	p.Limit = val
}
func (p *SearchRequest) SetOffset(val *int32) {
	p.Offset = val
}
func (p *SearchRequest) SetWithSnippet(val *bool) {
	p.WithSnippet = val
}

func (p *SearchRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *SearchRequest) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *SearchRequest) IsSetWithSnippet() bool {
	return p.WithSnippet != nil
}

func (p *SearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchRequest(%+v)", *p)
}

var fieldIDToName_SearchRequest = map[int16]string{
	1: "query",
	2: "limit",
	3: "offset",
	4: "with_snippet",
}

type SearchResponse struct {
	Items      []*common.SearchItem `thrift:"items,1" frugal:"1,default,list<common.SearchItem>" json:"items"`
	Returned   int32                `thrift:"returned,2" frugal:"2,default,i32" json:"returned"`
	NextOffset *int32               `thrift:"next_offset,3,optional" frugal:"3,optional,i32" json:"next_offset,omitempty"`
	Total      *int32               `thrift:"total,4,optional" frugal:"4,optional,i32" json:"total,omitempty"`
}

func NewSearchResponse() *SearchResponse {
	return &SearchResponse{}
}

func (p *SearchResponse) InitDefault() {
}

func (p *SearchResponse) GetItems() (v []*common.SearchItem) {
	return p.Items
}

func (p *SearchResponse) GetReturned() (v int32) {
	return p.Returned
}

var SearchResponse_NextOffset_DEFAULT int32

func (p *SearchResponse) GetNextOffset() (v int32) {
	if !p.IsSetNextOffset() {
		return SearchResponse_NextOffset_DEFAULT
	}
	return *p.NextOffset
}

var SearchResponse_Total_DEFAULT int32

func (p *SearchResponse) GetTotal() (v int32) {
	if !p.IsSetTotal() {
		return SearchResponse_Total_DEFAULT
	}
	return *p.Total
}
func (p *SearchResponse) SetItems(val []*common.SearchItem) {
	p.Items = val
}
func (p *SearchResponse) SetReturned(val int32) {
	p.Returned = val
}
func (p *SearchResponse) SetNextOffset(val *int32) {
	p.NextOffset = val
}
func (p *SearchResponse) SetTotal(val *int32) { p.Total = val }

func (p *SearchResponse) IsSetNextOffset() bool {
	return p.NextOffset != nil
}
func (p *SearchResponse) IsSetTotal() bool { return p.Total != nil }

func (p *SearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchResponse(%+v)", *p)
}

var fieldIDToName_SearchResponse = map[int16]string{
	1: "items",
	2: "returned",
	3: "next_offset",
	4: "total",
}

type InfoResponse struct {
	Stats map[string]string `thrift:"stats,1" frugal:"1,default,map<string:string>" json:"stats"`
}

func NewInfoResponse() *InfoResponse {
	return &InfoResponse{}
}

func (p *InfoResponse) InitDefault() {
}

func (p *InfoResponse) GetStats() (v map[string]string) {
	return p.Stats
}
func (p *InfoResponse) SetStats(val map[string]string) {
	p.Stats = val
}

func (p *InfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InfoResponse(%+v)", *p)
}

var fieldIDToName_InfoResponse = map[int16]string{
	1: "stats",
}

type KBService interface {
	AddDoc(ctx context.Context, req *AddDocRequest) (r *common.KBDoc, err error)

	UpdateDoc(ctx context.Context, req *UpdateDocRequest) (r *common.KBDoc, err error)

	DeleteDoc(ctx context.Context, req *DeleteDocRequest) (r *DeleteDocResponse, err error)

	Search(ctx context.Context, req *SearchRequest) (r *SearchResponse, err error)

	Info(ctx context.Context) (r *InfoResponse, err error)
}

type KBServiceAddDocArgs struct {
	Req *AddDocRequest `thrift:"req,1" frugal:"1,default,AddDocRequest" json:"req"`
}

func NewKBServiceAddDocArgs() *KBServiceAddDocArgs {
	return &KBServiceAddDocArgs{}
}

func (p *KBServiceAddDocArgs) InitDefault() {
}

var KBServiceAddDocArgs_Req_DEFAULT *AddDocRequest

func (p *KBServiceAddDocArgs) GetReq() (v *AddDocRequest) {
	if !p.IsSetReq() {
		return KBServiceAddDocArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *KBServiceAddDocArgs) SetReq(val *AddDocRequest) {
	p.Req = val
}

func (p *KBServiceAddDocArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *KBServiceAddDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceAddDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceAddDocArgs = map[int16]string{
	1: "req",
}

type KBServiceAddDocResult struct {
	Success *common.KBDoc        `thrift:"success,0,optional" frugal:"0,optional,common.KBDoc" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceAddDocResult() *KBServiceAddDocResult {
	return &KBServiceAddDocResult{}
}

func (p *KBServiceAddDocResult) InitDefault() {
}

var KBServiceAddDocResult_Success_DEFAULT *common.KBDoc

func (p *KBServiceAddDocResult) GetSuccess() (v *common.KBDoc) {
	if !p.IsSetSuccess() {
		return KBServiceAddDocResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceAddDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceAddDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceAddDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceAddDocResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.KBDoc)
}
func (p *KBServiceAddDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceAddDocResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceAddDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceAddDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceAddDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceAddDocResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceUpdateDocArgs struct {
	Req *UpdateDocRequest `thrift:"req,1" frugal:"1,default,UpdateDocRequest" json:"req"`
}

func NewKBServiceUpdateDocArgs() *KBServiceUpdateDocArgs {
	return &KBServiceUpdateDocArgs{}
}

func (p *KBServiceUpdateDocArgs) InitDefault() {
}

var KBServiceUpdateDocArgs_Req_DEFAULT *UpdateDocRequest

func (p *KBServiceUpdateDocArgs) GetReq() (v *UpdateDocRequest) {
	if !p.IsSetReq() {
		return KBServiceUpdateDocArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *KBServiceUpdateDocArgs) SetReq(val *UpdateDocRequest) {
	p.Req = val
}

func (p *KBServiceUpdateDocArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *KBServiceUpdateDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceUpdateDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceUpdateDocArgs = map[int16]string{
	1: "req",
}

type KBServiceUpdateDocResult struct {
	Success *common.KBDoc        `thrift:"success,0,optional" frugal:"0,optional,common.KBDoc" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceUpdateDocResult() *KBServiceUpdateDocResult {
	return &KBServiceUpdateDocResult{}
}

func (p *KBServiceUpdateDocResult) InitDefault() {
}

var KBServiceUpdateDocResult_Success_DEFAULT *common.KBDoc

func (p *KBServiceUpdateDocResult) GetSuccess() (v *common.KBDoc) {
	if !p.IsSetSuccess() {
		return KBServiceUpdateDocResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceUpdateDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceUpdateDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceUpdateDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceUpdateDocResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.KBDoc)
}
func (p *KBServiceUpdateDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceUpdateDocResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceUpdateDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceUpdateDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceUpdateDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceUpdateDocResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceDeleteDocArgs struct {
	Req *DeleteDocRequest `thrift:"req,1" frugal:"1,default,DeleteDocRequest" json:"req"`
}

func NewKBServiceDeleteDocArgs() *KBServiceDeleteDocArgs {
	return &KBServiceDeleteDocArgs{}
}

func (p *KBServiceDeleteDocArgs) InitDefault() {
}

var KBServiceDeleteDocArgs_Req_DEFAULT *DeleteDocRequest

func (p *KBServiceDeleteDocArgs) GetReq() (v *DeleteDocRequest) {
	if !p.IsSetReq() {
		return KBServiceDeleteDocArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *KBServiceDeleteDocArgs) SetReq(val *DeleteDocRequest) {
	p.Req = val
}

func (p *KBServiceDeleteDocArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *KBServiceDeleteDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceDeleteDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceDeleteDocArgs = map[int16]string{
	1: "req",
}

type KBServiceDeleteDocResult struct {
	Success *DeleteDocResponse   `thrift:"success,0,optional" frugal:"0,optional,DeleteDocResponse" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceDeleteDocResult() *KBServiceDeleteDocResult {
	return &KBServiceDeleteDocResult{}
}

func (p *KBServiceDeleteDocResult) InitDefault() {
}

var KBServiceDeleteDocResult_Success_DEFAULT *DeleteDocResponse

func (p *KBServiceDeleteDocResult) GetSuccess() (v *DeleteDocResponse) {
	if !p.IsSetSuccess() {
		return KBServiceDeleteDocResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceDeleteDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceDeleteDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceDeleteDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceDeleteDocResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteDocResponse)
}
func (p *KBServiceDeleteDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceDeleteDocResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceDeleteDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceDeleteDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceDeleteDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceDeleteDocResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceSearchArgs struct {
	Req *SearchRequest `thrift:"req,1" frugal:"1,default,SearchRequest" json:"req"`
}

func NewKBServiceSearchArgs() *KBServiceSearchArgs {
	return &KBServiceSearchArgs{}
}

func (p *KBServiceSearchArgs) InitDefault() {
}

var KBServiceSearchArgs_Req_DEFAULT *SearchRequest

func (p *KBServiceSearchArgs) GetReq() (v *SearchRequest) {
	if !p.IsSetReq() {
		return KBServiceSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *KBServiceSearchArgs) SetReq(val *SearchRequest) {
	p.Req = val
}

func (p *KBServiceSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *KBServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceSearchArgs(%+v)", *p)
}

var fieldIDToName_KBServiceSearchArgs = map[int16]string{
	1: "req",
}

type KBServiceSearchResult struct {
	Success *SearchResponse      `thrift:"success,0,optional" frugal:"0,optional,SearchResponse" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceSearchResult() *KBServiceSearchResult {
	return &KBServiceSearchResult{}
}

func (p *KBServiceSearchResult) InitDefault() {
}

var KBServiceSearchResult_Success_DEFAULT *SearchResponse

func (p *KBServiceSearchResult) GetSuccess() (v *SearchResponse) {
	if !p.IsSetSuccess() {
		return KBServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceSearchResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceSearchResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceSearchResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchResponse)
}
func (p *KBServiceSearchResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceSearchResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceSearchResult(%+v)", *p)
}

var fieldIDToName_KBServiceSearchResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceInfoArgs struct {
}

func NewKBServiceInfoArgs() *KBServiceInfoArgs {
	return &KBServiceInfoArgs{}
}

func (p *KBServiceInfoArgs) InitDefault() {
}

func (p *KBServiceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceInfoArgs(%+v)", *p)
}

var fieldIDToName_KBServiceInfoArgs = map[int16]string{}

type KBServiceInfoResult struct {
	Success *InfoResponse        `thrift:"success,0,optional" frugal:"0,optional,InfoResponse" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceInfoResult() *KBServiceInfoResult {
	return &KBServiceInfoResult{}
}

func (p *KBServiceInfoResult) InitDefault() {
}

var KBServiceInfoResult_Success_DEFAULT *InfoResponse

func (p *KBServiceInfoResult) GetSuccess() (v *InfoResponse) {
	if !p.IsSetSuccess() {
		return KBServiceInfoResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceInfoResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceInfoResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceInfoResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*InfoResponse)
}
func (p *KBServiceInfoResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceInfoResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceInfoResult(%+v)", *p)
}

var fieldIDToName_KBServiceInfoResult = map[int16]string{
	0: "success",
	1: "err",
}

// exceptions of methods in KBService.
var (
	_ error = (*common.ServiceError)(nil)
)
