// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package kb

import (
	"context"
	"fmt"
	"github.com/gogogo1024/assist-fusion/kitex_gen/common"
)

type KBService interface {
	AddDoc(ctx context.Context, title string, content string) (r *common.KBDoc, err error)

	UpdateDoc(ctx context.Context, id string, title string, content string) (r *common.KBDoc, err error)

	DeleteDoc(ctx context.Context, id string) (err error)

	Search(ctx context.Context, query string, limit int32) (r []*common.SearchItem, err error)

	Info(ctx context.Context) (r map[string]string, err error)
}

type KBServiceAddDocArgs struct {
	Title   string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Content string `thrift:"content,2" frugal:"2,default,string" json:"content"`
}

func NewKBServiceAddDocArgs() *KBServiceAddDocArgs {
	return &KBServiceAddDocArgs{}
}

func (p *KBServiceAddDocArgs) InitDefault() {
}

func (p *KBServiceAddDocArgs) GetTitle() (v string) {
	return p.Title
}

func (p *KBServiceAddDocArgs) GetContent() (v string) {
	return p.Content
}
func (p *KBServiceAddDocArgs) SetTitle(val string) {
	p.Title = val
}
func (p *KBServiceAddDocArgs) SetContent(val string) {
	p.Content = val
}

func (p *KBServiceAddDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceAddDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceAddDocArgs = map[int16]string{
	1: "title",
	2: "content",
}

type KBServiceAddDocResult struct {
	Success *common.KBDoc        `thrift:"success,0,optional" frugal:"0,optional,common.KBDoc" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceAddDocResult() *KBServiceAddDocResult {
	return &KBServiceAddDocResult{}
}

func (p *KBServiceAddDocResult) InitDefault() {
}

var KBServiceAddDocResult_Success_DEFAULT *common.KBDoc

func (p *KBServiceAddDocResult) GetSuccess() (v *common.KBDoc) {
	if !p.IsSetSuccess() {
		return KBServiceAddDocResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceAddDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceAddDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceAddDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceAddDocResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.KBDoc)
}
func (p *KBServiceAddDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceAddDocResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceAddDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceAddDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceAddDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceAddDocResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceUpdateDocArgs struct {
	Id      string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Title   string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Content string `thrift:"content,3" frugal:"3,default,string" json:"content"`
}

func NewKBServiceUpdateDocArgs() *KBServiceUpdateDocArgs {
	return &KBServiceUpdateDocArgs{}
}

func (p *KBServiceUpdateDocArgs) InitDefault() {
}

func (p *KBServiceUpdateDocArgs) GetId() (v string) {
	return p.Id
}

func (p *KBServiceUpdateDocArgs) GetTitle() (v string) {
	return p.Title
}

func (p *KBServiceUpdateDocArgs) GetContent() (v string) {
	return p.Content
}
func (p *KBServiceUpdateDocArgs) SetId(val string) {
	p.Id = val
}
func (p *KBServiceUpdateDocArgs) SetTitle(val string) {
	p.Title = val
}
func (p *KBServiceUpdateDocArgs) SetContent(val string) {
	p.Content = val
}

func (p *KBServiceUpdateDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceUpdateDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceUpdateDocArgs = map[int16]string{
	1: "id",
	2: "title",
	3: "content",
}

type KBServiceUpdateDocResult struct {
	Success *common.KBDoc        `thrift:"success,0,optional" frugal:"0,optional,common.KBDoc" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceUpdateDocResult() *KBServiceUpdateDocResult {
	return &KBServiceUpdateDocResult{}
}

func (p *KBServiceUpdateDocResult) InitDefault() {
}

var KBServiceUpdateDocResult_Success_DEFAULT *common.KBDoc

func (p *KBServiceUpdateDocResult) GetSuccess() (v *common.KBDoc) {
	if !p.IsSetSuccess() {
		return KBServiceUpdateDocResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceUpdateDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceUpdateDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceUpdateDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceUpdateDocResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.KBDoc)
}
func (p *KBServiceUpdateDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceUpdateDocResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceUpdateDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceUpdateDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceUpdateDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceUpdateDocResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceDeleteDocArgs struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewKBServiceDeleteDocArgs() *KBServiceDeleteDocArgs {
	return &KBServiceDeleteDocArgs{}
}

func (p *KBServiceDeleteDocArgs) InitDefault() {
}

func (p *KBServiceDeleteDocArgs) GetId() (v string) {
	return p.Id
}
func (p *KBServiceDeleteDocArgs) SetId(val string) {
	p.Id = val
}

func (p *KBServiceDeleteDocArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceDeleteDocArgs(%+v)", *p)
}

var fieldIDToName_KBServiceDeleteDocArgs = map[int16]string{
	1: "id",
}

type KBServiceDeleteDocResult struct {
	Err *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceDeleteDocResult() *KBServiceDeleteDocResult {
	return &KBServiceDeleteDocResult{}
}

func (p *KBServiceDeleteDocResult) InitDefault() {
}

var KBServiceDeleteDocResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceDeleteDocResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceDeleteDocResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceDeleteDocResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceDeleteDocResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceDeleteDocResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceDeleteDocResult(%+v)", *p)
}

var fieldIDToName_KBServiceDeleteDocResult = map[int16]string{
	1: "err",
}

type KBServiceSearchArgs struct {
	Query string `thrift:"query,1" frugal:"1,default,string" json:"query"`
	Limit int32  `thrift:"limit,2" frugal:"2,default,i32" json:"limit"`
}

func NewKBServiceSearchArgs() *KBServiceSearchArgs {
	return &KBServiceSearchArgs{}
}

func (p *KBServiceSearchArgs) InitDefault() {
}

func (p *KBServiceSearchArgs) GetQuery() (v string) {
	return p.Query
}

func (p *KBServiceSearchArgs) GetLimit() (v int32) {
	return p.Limit
}
func (p *KBServiceSearchArgs) SetQuery(val string) {
	p.Query = val
}
func (p *KBServiceSearchArgs) SetLimit(val int32) {
	p.Limit = val
}

func (p *KBServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceSearchArgs(%+v)", *p)
}

var fieldIDToName_KBServiceSearchArgs = map[int16]string{
	1: "query",
	2: "limit",
}

type KBServiceSearchResult struct {
	Success []*common.SearchItem `thrift:"success,0,optional" frugal:"0,optional,list<common.SearchItem>" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceSearchResult() *KBServiceSearchResult {
	return &KBServiceSearchResult{}
}

func (p *KBServiceSearchResult) InitDefault() {
}

var KBServiceSearchResult_Success_DEFAULT []*common.SearchItem

func (p *KBServiceSearchResult) GetSuccess() (v []*common.SearchItem) {
	if !p.IsSetSuccess() {
		return KBServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceSearchResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceSearchResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceSearchResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceSearchResult) SetSuccess(x interface{}) {
	p.Success = x.([]*common.SearchItem)
}
func (p *KBServiceSearchResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceSearchResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceSearchResult(%+v)", *p)
}

var fieldIDToName_KBServiceSearchResult = map[int16]string{
	0: "success",
	1: "err",
}

type KBServiceInfoArgs struct {
}

func NewKBServiceInfoArgs() *KBServiceInfoArgs {
	return &KBServiceInfoArgs{}
}

func (p *KBServiceInfoArgs) InitDefault() {
}

func (p *KBServiceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceInfoArgs(%+v)", *p)
}

var fieldIDToName_KBServiceInfoArgs = map[int16]string{}

type KBServiceInfoResult struct {
	Success map[string]string    `thrift:"success,0,optional" frugal:"0,optional,map<string:string>" json:"success,omitempty"`
	Err     *common.ServiceError `thrift:"err,1,optional" frugal:"1,optional,common.ServiceError" json:"err,omitempty"`
}

func NewKBServiceInfoResult() *KBServiceInfoResult {
	return &KBServiceInfoResult{}
}

func (p *KBServiceInfoResult) InitDefault() {
}

var KBServiceInfoResult_Success_DEFAULT map[string]string

func (p *KBServiceInfoResult) GetSuccess() (v map[string]string) {
	if !p.IsSetSuccess() {
		return KBServiceInfoResult_Success_DEFAULT
	}
	return p.Success
}

var KBServiceInfoResult_Err_DEFAULT *common.ServiceError

func (p *KBServiceInfoResult) GetErr() (v *common.ServiceError) {
	if !p.IsSetErr() {
		return KBServiceInfoResult_Err_DEFAULT
	}
	return p.Err
}
func (p *KBServiceInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(map[string]string)
}
func (p *KBServiceInfoResult) SetErr(val *common.ServiceError) {
	p.Err = val
}

func (p *KBServiceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KBServiceInfoResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *KBServiceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBServiceInfoResult(%+v)", *p)
}

var fieldIDToName_KBServiceInfoResult = map[int16]string{
	0: "success",
	1: "err",
}

// exceptions of methods in KBService.
var (
	_ error = (*common.ServiceError)(nil)
)
