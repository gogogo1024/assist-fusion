// Code generated by Kitex v0.14.1. DO NOT EDIT.

package kbservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	common "github.com/gogogo1024/assist-fusion/kitex_gen/common"
	kb "github.com/gogogo1024/assist-fusion/kitex_gen/kb"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddDoc": kitex.NewMethodInfo(
		addDocHandler,
		newKBServiceAddDocArgs,
		newKBServiceAddDocResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDoc": kitex.NewMethodInfo(
		updateDocHandler,
		newKBServiceUpdateDocArgs,
		newKBServiceUpdateDocResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDoc": kitex.NewMethodInfo(
		deleteDocHandler,
		newKBServiceDeleteDocArgs,
		newKBServiceDeleteDocResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Search": kitex.NewMethodInfo(
		searchHandler,
		newKBServiceSearchArgs,
		newKBServiceSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Info": kitex.NewMethodInfo(
		infoHandler,
		newKBServiceInfoArgs,
		newKBServiceInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	kBServiceServiceInfo                = NewServiceInfo()
	kBServiceServiceInfoForClient       = NewServiceInfoForClient()
	kBServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return kBServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return kBServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return kBServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "KBService"
	handlerType := (*kb.KBService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "kb",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func addDocHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*kb.KBServiceAddDocArgs)
	realResult := result.(*kb.KBServiceAddDocResult)
	success, err := handler.(kb.KBService).AddDoc(ctx, realArg.Title, realArg.Content)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newKBServiceAddDocArgs() interface{} {
	return kb.NewKBServiceAddDocArgs()
}

func newKBServiceAddDocResult() interface{} {
	return kb.NewKBServiceAddDocResult()
}

func updateDocHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*kb.KBServiceUpdateDocArgs)
	realResult := result.(*kb.KBServiceUpdateDocResult)
	success, err := handler.(kb.KBService).UpdateDoc(ctx, realArg.Id, realArg.Title, realArg.Content)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newKBServiceUpdateDocArgs() interface{} {
	return kb.NewKBServiceUpdateDocArgs()
}

func newKBServiceUpdateDocResult() interface{} {
	return kb.NewKBServiceUpdateDocResult()
}

func deleteDocHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*kb.KBServiceDeleteDocArgs)
	realResult := result.(*kb.KBServiceDeleteDocResult)
	err := handler.(kb.KBService).DeleteDoc(ctx, realArg.Id)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
	}
	return nil
}
func newKBServiceDeleteDocArgs() interface{} {
	return kb.NewKBServiceDeleteDocArgs()
}

func newKBServiceDeleteDocResult() interface{} {
	return kb.NewKBServiceDeleteDocResult()
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*kb.KBServiceSearchArgs)
	realResult := result.(*kb.KBServiceSearchResult)
	success, err := handler.(kb.KBService).Search(ctx, realArg.Query, realArg.Limit)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newKBServiceSearchArgs() interface{} {
	return kb.NewKBServiceSearchArgs()
}

func newKBServiceSearchResult() interface{} {
	return kb.NewKBServiceSearchResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*kb.KBServiceInfoArgs)
	realResult := result.(*kb.KBServiceInfoResult)
	success, err := handler.(kb.KBService).Info(ctx)
	if err != nil {
		switch v := err.(type) {
		case *common.ServiceError:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newKBServiceInfoArgs() interface{} {
	return kb.NewKBServiceInfoArgs()
}

func newKBServiceInfoResult() interface{} {
	return kb.NewKBServiceInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddDoc(ctx context.Context, title string, content string) (r *common.KBDoc, err error) {
	var _args kb.KBServiceAddDocArgs
	_args.Title = title
	_args.Content = content
	var _result kb.KBServiceAddDocResult
	if err = p.c.Call(ctx, "AddDoc", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDoc(ctx context.Context, id string, title string, content string) (r *common.KBDoc, err error) {
	var _args kb.KBServiceUpdateDocArgs
	_args.Id = id
	_args.Title = title
	_args.Content = content
	var _result kb.KBServiceUpdateDocResult
	if err = p.c.Call(ctx, "UpdateDoc", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDoc(ctx context.Context, id string) (err error) {
	var _args kb.KBServiceDeleteDocArgs
	_args.Id = id
	var _result kb.KBServiceDeleteDocResult
	if err = p.c.Call(ctx, "DeleteDoc", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return _result.Err
	}
	return nil
}

func (p *kClient) Search(ctx context.Context, query string, limit int32) (r []*common.SearchItem, err error) {
	var _args kb.KBServiceSearchArgs
	_args.Query = query
	_args.Limit = limit
	var _result kb.KBServiceSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context) (r map[string]string, err error) {
	var _args kb.KBServiceInfoArgs
	var _result kb.KBServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}
