// Code generated by Kitex v0.14.1. DO NOT EDIT.

package kbservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	common "github.com/gogogo1024/assist-fusion/kitex_gen/common"
	kb "github.com/gogogo1024/assist-fusion/kitex_gen/kb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddDoc(ctx context.Context, req *kb.AddDocRequest, callOptions ...callopt.Option) (r *common.KBDoc, err error)
	UpdateDoc(ctx context.Context, req *kb.UpdateDocRequest, callOptions ...callopt.Option) (r *common.KBDoc, err error)
	DeleteDoc(ctx context.Context, req *kb.DeleteDocRequest, callOptions ...callopt.Option) (r *kb.DeleteDocResponse, err error)
	Search(ctx context.Context, req *kb.SearchRequest, callOptions ...callopt.Option) (r *kb.SearchResponse, err error)
	Info(ctx context.Context, callOptions ...callopt.Option) (r *kb.InfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kKBServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kKBServiceClient struct {
	*kClient
}

func (p *kKBServiceClient) AddDoc(ctx context.Context, req *kb.AddDocRequest, callOptions ...callopt.Option) (r *common.KBDoc, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddDoc(ctx, req)
}

func (p *kKBServiceClient) UpdateDoc(ctx context.Context, req *kb.UpdateDocRequest, callOptions ...callopt.Option) (r *common.KBDoc, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDoc(ctx, req)
}

func (p *kKBServiceClient) DeleteDoc(ctx context.Context, req *kb.DeleteDocRequest, callOptions ...callopt.Option) (r *kb.DeleteDocResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDoc(ctx, req)
}

func (p *kKBServiceClient) Search(ctx context.Context, req *kb.SearchRequest, callOptions ...callopt.Option) (r *kb.SearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Search(ctx, req)
}

func (p *kKBServiceClient) Info(ctx context.Context, callOptions ...callopt.Option) (r *kb.InfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Info(ctx)
}
