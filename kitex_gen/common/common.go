// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TicketStatus int64

const (
	TicketStatus_CREATED   TicketStatus = 0
	TicketStatus_ASSIGNED  TicketStatus = 1
	TicketStatus_ESCALATED TicketStatus = 2
	TicketStatus_RESOLVED  TicketStatus = 3
)

func (p TicketStatus) String() string {
	switch p {
	case TicketStatus_CREATED:
		return "CREATED"
	case TicketStatus_ASSIGNED:
		return "ASSIGNED"
	case TicketStatus_ESCALATED:
		return "ESCALATED"
	case TicketStatus_RESOLVED:
		return "RESOLVED"
	}
	return "<UNSET>"
}

func TicketStatusFromString(s string) (TicketStatus, error) {
	switch s {
	case "CREATED":
		return TicketStatus_CREATED, nil
	case "ASSIGNED":
		return TicketStatus_ASSIGNED, nil
	case "ESCALATED":
		return TicketStatus_ESCALATED, nil
	case "RESOLVED":
		return TicketStatus_RESOLVED, nil
	}
	return TicketStatus(0), fmt.Errorf("not a valid TicketStatus string")
}

func TicketStatusPtr(v TicketStatus) *TicketStatus { return &v }
func (p *TicketStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TicketStatus(result.Int64)
	return
}

func (p *TicketStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TicketCycle struct {
	CreatedAt   int64        `thrift:"created_at,1" frugal:"1,default,i64" json:"created_at"`
	AssignedAt  int64        `thrift:"assigned_at,2" frugal:"2,default,i64" json:"assigned_at"`
	ResolvedAt  int64        `thrift:"resolved_at,3" frugal:"3,default,i64" json:"resolved_at"`
	EscalatedAt int64        `thrift:"escalated_at,4" frugal:"4,default,i64" json:"escalated_at"`
	Status      TicketStatus `thrift:"status,5" frugal:"5,default,TicketStatus" json:"status"`
}

func NewTicketCycle() *TicketCycle {
	return &TicketCycle{}
}

func (p *TicketCycle) InitDefault() {
}

func (p *TicketCycle) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *TicketCycle) GetAssignedAt() (v int64) {
	return p.AssignedAt
}

func (p *TicketCycle) GetResolvedAt() (v int64) {
	return p.ResolvedAt
}

func (p *TicketCycle) GetEscalatedAt() (v int64) {
	return p.EscalatedAt
}

func (p *TicketCycle) GetStatus() (v TicketStatus) {
	return p.Status
}
func (p *TicketCycle) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *TicketCycle) SetAssignedAt(val int64) {
	p.AssignedAt = val
}
func (p *TicketCycle) SetResolvedAt(val int64) {
	p.ResolvedAt = val
}
func (p *TicketCycle) SetEscalatedAt(val int64) {
	p.EscalatedAt = val
}
func (p *TicketCycle) SetStatus(val TicketStatus) {
	p.Status = val
}

func (p *TicketCycle) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketCycle(%+v)", *p)
}

var fieldIDToName_TicketCycle = map[int16]string{
	1: "created_at",
	2: "assigned_at",
	3: "resolved_at",
	4: "escalated_at",
	5: "status",
}

type TicketEvent struct {
	Type string `thrift:"type,1" frugal:"1,default,string" json:"type"`
	At   int64  `thrift:"at,2" frugal:"2,default,i64" json:"at"`
	Note string `thrift:"note,3" frugal:"3,default,string" json:"note"`
}

func NewTicketEvent() *TicketEvent {
	return &TicketEvent{}
}

func (p *TicketEvent) InitDefault() {
}

func (p *TicketEvent) GetType() (v string) {
	return p.Type
}

func (p *TicketEvent) GetAt() (v int64) {
	return p.At
}

func (p *TicketEvent) GetNote() (v string) {
	return p.Note
}
func (p *TicketEvent) SetType(val string) {
	p.Type = val
}
func (p *TicketEvent) SetAt(val int64) {
	p.At = val
}
func (p *TicketEvent) SetNote(val string) {
	p.Note = val
}

func (p *TicketEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TicketEvent(%+v)", *p)
}

var fieldIDToName_TicketEvent = map[int16]string{
	1: "type",
	2: "at",
	3: "note",
}

type Ticket struct {
	Id           string         `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Title        string         `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Desc         string         `thrift:"desc,3" frugal:"3,default,string" json:"desc"`
	Status       TicketStatus   `thrift:"status,4" frugal:"4,default,TicketStatus" json:"status"`
	CreatedAt    int64          `thrift:"created_at,5" frugal:"5,default,i64" json:"created_at"`
	AssignedAt   int64          `thrift:"assigned_at,6" frugal:"6,default,i64" json:"assigned_at"`
	ResolvedAt   int64          `thrift:"resolved_at,7" frugal:"7,default,i64" json:"resolved_at"`
	EscalatedAt  int64          `thrift:"escalated_at,8" frugal:"8,default,i64" json:"escalated_at"`
	ReopenedAt   int64          `thrift:"reopened_at,9" frugal:"9,default,i64" json:"reopened_at"`
	Cycles       []*TicketCycle `thrift:"cycles,10" frugal:"10,default,list<TicketCycle>" json:"cycles"`
	CurrentCycle int32          `thrift:"current_cycle,11" frugal:"11,default,i32" json:"current_cycle"`
	Events       []*TicketEvent `thrift:"events,12" frugal:"12,default,list<TicketEvent>" json:"events"`
}

func NewTicket() *Ticket {
	return &Ticket{}
}

func (p *Ticket) InitDefault() {
}

func (p *Ticket) GetId() (v string) {
	return p.Id
}

func (p *Ticket) GetTitle() (v string) {
	return p.Title
}

func (p *Ticket) GetDesc() (v string) {
	return p.Desc
}

func (p *Ticket) GetStatus() (v TicketStatus) {
	return p.Status
}

func (p *Ticket) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Ticket) GetAssignedAt() (v int64) {
	return p.AssignedAt
}

func (p *Ticket) GetResolvedAt() (v int64) {
	return p.ResolvedAt
}

func (p *Ticket) GetEscalatedAt() (v int64) {
	return p.EscalatedAt
}

func (p *Ticket) GetReopenedAt() (v int64) {
	return p.ReopenedAt
}

func (p *Ticket) GetCycles() (v []*TicketCycle) {
	return p.Cycles
}

func (p *Ticket) GetCurrentCycle() (v int32) {
	return p.CurrentCycle
}

func (p *Ticket) GetEvents() (v []*TicketEvent) {
	return p.Events
}
func (p *Ticket) SetId(val string) {
	p.Id = val
}
func (p *Ticket) SetTitle(val string) {
	p.Title = val
}
func (p *Ticket) SetDesc(val string) {
	p.Desc = val
}
func (p *Ticket) SetStatus(val TicketStatus) {
	p.Status = val
}
func (p *Ticket) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Ticket) SetAssignedAt(val int64) {
	p.AssignedAt = val
}
func (p *Ticket) SetResolvedAt(val int64) {
	p.ResolvedAt = val
}
func (p *Ticket) SetEscalatedAt(val int64) {
	p.EscalatedAt = val
}
func (p *Ticket) SetReopenedAt(val int64) {
	p.ReopenedAt = val
}
func (p *Ticket) SetCycles(val []*TicketCycle) {
	p.Cycles = val
}
func (p *Ticket) SetCurrentCycle(val int32) {
	p.CurrentCycle = val
}
func (p *Ticket) SetEvents(val []*TicketEvent) {
	p.Events = val
}

func (p *Ticket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticket(%+v)", *p)
}

var fieldIDToName_Ticket = map[int16]string{
	1:  "id",
	2:  "title",
	3:  "desc",
	4:  "status",
	5:  "created_at",
	6:  "assigned_at",
	7:  "resolved_at",
	8:  "escalated_at",
	9:  "reopened_at",
	10: "cycles",
	11: "current_cycle",
	12: "events",
}

type KBDoc struct {
	Id      string            `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Title   string            `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Content string            `thrift:"content,3" frugal:"3,default,string" json:"content"`
	Tags    map[string]string `thrift:"tags,4,optional" frugal:"4,optional,map<string:string>" json:"tags,omitempty"`
}

func NewKBDoc() *KBDoc {
	return &KBDoc{}
}

func (p *KBDoc) InitDefault() {
}

func (p *KBDoc) GetId() (v string) {
	return p.Id
}

func (p *KBDoc) GetTitle() (v string) {
	return p.Title
}

func (p *KBDoc) GetContent() (v string) {
	return p.Content
}

var KBDoc_Tags_DEFAULT map[string]string

func (p *KBDoc) GetTags() (v map[string]string) {
	if !p.IsSetTags() {
		return KBDoc_Tags_DEFAULT
	}
	return p.Tags
}
func (p *KBDoc) SetId(val string) {
	p.Id = val
}
func (p *KBDoc) SetTitle(val string) {
	p.Title = val
}
func (p *KBDoc) SetContent(val string) {
	p.Content = val
}
func (p *KBDoc) SetTags(val map[string]string) {
	p.Tags = val
}

func (p *KBDoc) IsSetTags() bool {
	return p.Tags != nil
}

func (p *KBDoc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KBDoc(%+v)", *p)
}

var fieldIDToName_KBDoc = map[int16]string{
	1: "id",
	2: "title",
	3: "content",
	4: "tags",
}

type SearchItem struct {
	Id      string  `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Title   string  `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Score   float64 `thrift:"score,3" frugal:"3,default,double" json:"score"`
	Snippet string  `thrift:"snippet,4" frugal:"4,default,string" json:"snippet"`
}

func NewSearchItem() *SearchItem {
	return &SearchItem{}
}

func (p *SearchItem) InitDefault() {
}

func (p *SearchItem) GetId() (v string) {
	return p.Id
}

func (p *SearchItem) GetTitle() (v string) {
	return p.Title
}

func (p *SearchItem) GetScore() (v float64) {
	return p.Score
}

func (p *SearchItem) GetSnippet() (v string) {
	return p.Snippet
}
func (p *SearchItem) SetId(val string) {
	p.Id = val
}
func (p *SearchItem) SetTitle(val string) {
	p.Title = val
}
func (p *SearchItem) SetScore(val float64) {
	p.Score = val
}
func (p *SearchItem) SetSnippet(val string) {
	p.Snippet = val
}

func (p *SearchItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchItem(%+v)", *p)
}

var fieldIDToName_SearchItem = map[int16]string{
	1: "id",
	2: "title",
	3: "score",
	4: "snippet",
}

type EmbeddingRequest struct {
	Texts []string `thrift:"texts,1" frugal:"1,default,list<string>" json:"texts"`
	Dim   int32    `thrift:"dim,2" frugal:"2,default,i32" json:"dim"`
}

func NewEmbeddingRequest() *EmbeddingRequest {
	return &EmbeddingRequest{}
}

func (p *EmbeddingRequest) InitDefault() {
}

func (p *EmbeddingRequest) GetTexts() (v []string) {
	return p.Texts
}

func (p *EmbeddingRequest) GetDim() (v int32) {
	return p.Dim
}
func (p *EmbeddingRequest) SetTexts(val []string) {
	p.Texts = val
}
func (p *EmbeddingRequest) SetDim(val int32) {
	p.Dim = val
}

func (p *EmbeddingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmbeddingRequest(%+v)", *p)
}

var fieldIDToName_EmbeddingRequest = map[int16]string{
	1: "texts",
	2: "dim",
}

type EmbeddingResponse struct {
	Vectors [][]float64     `thrift:"vectors,1" frugal:"1,default,list<list<double>>" json:"vectors"`
	Dim     int32           `thrift:"dim,2" frugal:"2,default,i32" json:"dim"`
	Usage   *EmbeddingUsage `thrift:"usage,3,optional" frugal:"3,optional,EmbeddingUsage" json:"usage,omitempty"`
}

func NewEmbeddingResponse() *EmbeddingResponse {
	return &EmbeddingResponse{}
}

func (p *EmbeddingResponse) InitDefault() {
}

func (p *EmbeddingResponse) GetVectors() (v [][]float64) {
	return p.Vectors
}

func (p *EmbeddingResponse) GetDim() (v int32) {
	return p.Dim
}

var EmbeddingResponse_Usage_DEFAULT *EmbeddingUsage

func (p *EmbeddingResponse) GetUsage() (v *EmbeddingUsage) {
	if !p.IsSetUsage() {
		return EmbeddingResponse_Usage_DEFAULT
	}
	return p.Usage
}
func (p *EmbeddingResponse) SetVectors(val [][]float64) {
	p.Vectors = val
}
func (p *EmbeddingResponse) SetDim(val int32) {
	p.Dim = val
}
func (p *EmbeddingResponse) SetUsage(val *EmbeddingUsage) {
	p.Usage = val
}

func (p *EmbeddingResponse) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *EmbeddingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmbeddingResponse(%+v)", *p)
}

var fieldIDToName_EmbeddingResponse = map[int16]string{
	1: "vectors",
	2: "dim",
	3: "usage",
}

type EmbeddingUsage struct {
	PromptTokens int32 `thrift:"prompt_tokens,1" frugal:"1,default,i32" json:"prompt_tokens"`
	TotalTokens  int32 `thrift:"total_tokens,2" frugal:"2,default,i32" json:"total_tokens"`
}

func NewEmbeddingUsage() *EmbeddingUsage {
	return &EmbeddingUsage{}
}

func (p *EmbeddingUsage) InitDefault() {
}

func (p *EmbeddingUsage) GetPromptTokens() (v int32) {
	return p.PromptTokens
}

func (p *EmbeddingUsage) GetTotalTokens() (v int32) {
	return p.TotalTokens
}
func (p *EmbeddingUsage) SetPromptTokens(val int32) {
	p.PromptTokens = val
}
func (p *EmbeddingUsage) SetTotalTokens(val int32) {
	p.TotalTokens = val
}

func (p *EmbeddingUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmbeddingUsage(%+v)", *p)
}

var fieldIDToName_EmbeddingUsage = map[int16]string{
	1: "prompt_tokens",
	2: "total_tokens",
}

type Pagination struct {
	Page     int32 `thrift:"page,1" frugal:"1,default,i32" json:"page"`
	PageSize int32 `thrift:"page_size,2" frugal:"2,default,i32" json:"page_size"`
}

func NewPagination() *Pagination {
	return &Pagination{}
}

func (p *Pagination) InitDefault() {
}

func (p *Pagination) GetPage() (v int32) {
	return p.Page
}

func (p *Pagination) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *Pagination) SetPage(val int32) {
	p.Page = val
}
func (p *Pagination) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *Pagination) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Pagination(%+v)", *p)
}

var fieldIDToName_Pagination = map[int16]string{
	1: "page",
	2: "page_size",
}

type PageInfo struct {
	Page       int32 `thrift:"page,1" frugal:"1,default,i32" json:"page"`
	PageSize   int32 `thrift:"page_size,2" frugal:"2,default,i32" json:"page_size"`
	TotalItems int32 `thrift:"total_items,3" frugal:"3,default,i32" json:"total_items"`
	TotalPages int32 `thrift:"total_pages,4" frugal:"4,default,i32" json:"total_pages"`
}

func NewPageInfo() *PageInfo {
	return &PageInfo{}
}

func (p *PageInfo) InitDefault() {
}

func (p *PageInfo) GetPage() (v int32) {
	return p.Page
}

func (p *PageInfo) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *PageInfo) GetTotalItems() (v int32) {
	return p.TotalItems
}

func (p *PageInfo) GetTotalPages() (v int32) {
	return p.TotalPages
}
func (p *PageInfo) SetPage(val int32) {
	p.Page = val
}
func (p *PageInfo) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *PageInfo) SetTotalItems(val int32) {
	p.TotalItems = val
}
func (p *PageInfo) SetTotalPages(val int32) {
	p.TotalPages = val
}

func (p *PageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageInfo(%+v)", *p)
}

var fieldIDToName_PageInfo = map[int16]string{
	1: "page",
	2: "page_size",
	3: "total_items",
	4: "total_pages",
}

type ServiceError struct {
	Code    string            `thrift:"code,1" frugal:"1,default,string" json:"code"`
	Message string            `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Meta    map[string]string `thrift:"meta,3,optional" frugal:"3,optional,map<string:string>" json:"meta,omitempty"`
}

func NewServiceError() *ServiceError {
	return &ServiceError{}
}

func (p *ServiceError) InitDefault() {
}

func (p *ServiceError) GetCode() (v string) {
	return p.Code
}

func (p *ServiceError) GetMessage() (v string) {
	return p.Message
}

var ServiceError_Meta_DEFAULT map[string]string

func (p *ServiceError) GetMeta() (v map[string]string) {
	if !p.IsSetMeta() {
		return ServiceError_Meta_DEFAULT
	}
	return p.Meta
}
func (p *ServiceError) SetCode(val string) {
	p.Code = val
}
func (p *ServiceError) SetMessage(val string) {
	p.Message = val
}
func (p *ServiceError) SetMeta(val map[string]string) {
	p.Meta = val
}

func (p *ServiceError) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *ServiceError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceError(%+v)", *p)
}
func (p *ServiceError) Error() string {
	return p.String()
}

var fieldIDToName_ServiceError = map[int16]string{
	1: "code",
	2: "message",
	3: "meta",
}
